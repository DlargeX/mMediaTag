local E = unpack(ElvUI)
local LSM = E.Libs.LSM

local module = mMT.Modules.ObjectiveTracker
if not module then
	return
end

local _G = _G
local pairs, unpack = pairs, unpack
local hooksecurefunc = hooksecurefunc
local InCombatLockdown = InCombatLockdown
local ObjectiveTrackerFrame = _G.ObjectiveTrackerFrame
local ObjectiveTrackerBlocksFrame = _G.ObjectiveTrackerBlocksFrame
local maxNumQuestsCanAccept = min(C_QuestLog.GetMaxNumQuestsCanAccept() + (E.Retail and 10 or 0), 35) -- 20 for ERA, 25 for WotLK, 35 for Retail

local function SkinBars(_, _, line)
	local progressBar = line and line.ProgressBar
	local bar = progressBar and progressBar.Bar
	if not bar then
		return
	end

	if not bar.mMT_Skin then
		if bar.backdrop then
			bar.backdrop:SetBackdropColor(E.db.general.backdropfadecolor.r, E.db.general.backdropfadecolor.g, E.db.general.backdropfadecolor.b, E.db.general.backdropfadecolor.a)
		end

		bar.mMT_Skin = true
	end
end

local function TrackerStateChanged() end

local function SetGradientColors(bar, r, g, b)
	if mMT.ElvUI_EltreumUI.loaded and E.db.ElvUI_EltreumUI.unitframes.gradientmode and E.db.mMT.objectivetracker.header.barcolorstyle == "class" then
		local ElvUI_EltreumUI = E:GetModule("ElvUI_EltreumUI", true)
		if ElvUI_EltreumUI and E.db.ElvUI_EltreumUI.unitframes.gradientmode.customcolor then
			bar:GetStatusBarTexture():SetGradient("HORIZONTAL", ElvUI_EltreumUI:GradientColorsCustom(E.myclass, false, false, false))
		else
			bar:GetStatusBarTexture():SetGradient("HORIZONTAL", ElvUI_EltreumUI:GradientColors(E.myclass, false, false, false))
		end
	else
		if E.db.mMT.objectivetracker.header.revers then
			bar:GetStatusBarTexture():SetGradient("HORIZONTAL", CreateColor(r, g, b, 1), CreateColor(r - 0.4, g - 0.4, b - 0.4, 1))
		else
			bar:GetStatusBarTexture():SetGradient("HORIZONTAL", CreateColor(r - 0.4, g - 0.4, b - 0.4, 1), CreateColor(r, g, b, 1))
		end
	end
end

local function AddHeaderBar(modul)
	if E.db.mMT.objectivetracker.header.barstyle ~= "none" then
		local BarColorStyle, BarColor, BarShadow = "class", { r = 1, g = 1, b = 1 }, true
		local width = _G.ObjectiveTrackerFrame:GetWidth()

		BarStyle = E.db.mMT.objectivetracker.header.barstyle
		BarColor = E.db.mMT.objectivetracker.header.barcolor
		BarColorStyle = E.db.mMT.objectivetracker.header.barcolorstyle
		BarShadow = E.db.mMT.objectivetracker.header.barshadow

		if BarColorStyle == "class" then
			BarColor = { r = mMT.ClassColor.r, g = mMT.ClassColor.g, b = mMT.ClassColor.b }
		end

		local BarTexture = LSM:Fetch("statusbar", E.db.mMT.objectivetracker.header.texture)

		local mBarOne = CreateFrame("StatusBar", "mMT_BarOne", modul)
		mBarOne:SetFrameStrata("BACKGROUND")
		mBarOne:SetSize(width, ((BarStyle == "onebig") or (BarStyle == "twobig")) and 5 or 1)
		mBarOne:SetPoint("BOTTOM", 0, 0)
		mBarOne:SetStatusBarTexture(BarTexture)
		mBarOne:CreateBackdrop()

		if E.db.mMT.objectivetracker.header.gradient then
			SetGradientColors(mBarOne, BarColor.r, BarColor.g, BarColor.b)
		else
			mBarOne:SetStatusBarColor(BarColor.r, BarColor.g, BarColor.b)
		end

		if BarShadow then
			mBarOne:CreateShadow()
		end

		if (BarStyle == "two") or (BarStyle == "twobig") then
			local mBarTwo = CreateFrame("StatusBar", "mMT_BarTwo", modul)
			mBarTwo:SetFrameStrata("BACKGROUND")
			mBarTwo:SetSize(width, (BarStyle == "twobig") and 5 or 1)
			mBarTwo:SetPoint("TOP", 0, 0)
			mBarTwo:SetStatusBarTexture(BarTexture)
			mBarTwo:CreateBackdrop()

			if E.db.mMT.objectivetracker.header.gradient then
				SetGradientColors(mBarTwo, BarColor.r, BarColor.g, BarColor.b)
			else
				mBarTwo:SetStatusBarColor(BarColor.r, BarColor.g, BarColor.b)
			end

			if BarShadow then
				mBarTwo:CreateShadow()
			end
		end
	end
end

local function GetTextProgressColor(percent)
	local GoodColor = E.db.mMT.objectivetracker.text.progresscolorgood
	local TransitColor = E.db.mMT.objectivetracker.text.progresscolortransit
	local BadColor = E.db.mMT.objectivetracker.text.progresscolorbad

	local r, g, b = E:ColorGradient(percent * 0.01, GoodColor.r, GoodColor.g, GoodColor.b, TransitColor.r, TransitColor.g, TransitColor.b, BadColor.r, BadColor.g, BadColor.b)
	return E:RGBToHex(r, g, b)
end
local function SkinHeaderText(text)
	local font = LSM:Fetch("font", E.db.mMT.objectivetracker.font)
	local fontflag = E.db.mMT.objectivetracker.fontflag
	local color = E.db.mMT.objectivetracker.header.fontcolor
	local textString = text:GetText()

	if E.db.mMT.objectivetracker.header.fontcolorstyle == "class" then
		color = { r = mMT.ClassColor.r, g = mMT.ClassColor.g, b = mMT.ClassColor.b }
	end

	text:SetText(textString)
	text:SetFont(font, E.db.mMT.objectivetracker.header.fontsize, fontflag)
	text:SetTextColor(color.r, color.g, color.b)
end

--_, block, text, questLogIndex, isQuestComplete, questID
local function SkinHeader()
	if E.db.mMT.objectivetracker.header.barstyle ~= "none" then
		local Frame = ObjectiveTrackerFrame.MODULES

		if Frame then
			for i = 1, #Frame do
				local Modules = Frame[i]
				if Modules then
					if Modules.Header then
						if Modules.Header.Text then
							SkinHeaderText(Modules.Header.Text)
						end

						if not Modules.mMT_Skin then
							AddHeaderBar(Modules.Header)
							Modules.mMT_Skin = true
						end
					end
				end
			end
		end
	end
end

local function SkinTitleFont(title)
	local font = LSM:Fetch("font", E.db.mMT.objectivetracker.font)
	local fontflag = E.db.mMT.objectivetracker.fontflag
	local color = E.db.mMT.objectivetracker.title.fontcolor

	if E.db.mMT.objectivetracker.title.fontcolorstyle == "class" then
		color = { r = mMT.ClassColor.r, g = mMT.ClassColor.g, b = mMT.ClassColor.b }
	end

	title:SetFont(font, E.db.mMT.objectivetracker.title.fontsize, fontflag)
	title:SetTextColor(color.r, color.g, color.b)
end

local function DashIconString(icon)
	return format("|T%s:8:8:-1:-3.8:64:64|t", icon)
end

function SkinText(_, block, text, questLogIndex, isQuestComplete, questID)
	if block then
		if block.HeaderText then
			SkinTitleFont(block.HeaderText)

			block.HeaderText:SetWidth(block.lineWidth or OBJECTIVE_TRACKER_TEXT_WIDTH)
			local height = block.HeaderText:GetHeight()
			block.height = height
		end

		if block.lines then
			for i = 1, #block.lines do
				local line = block.lines[i]
                mMT:Print(line.dashStyle, text)
				local DashStyle = E.db.mMT.objectivetracker.dash.style
				if line.Dash then
					if DashStyle ~= "blizzard" and line.dashStyle == 1 then
						if DashStyle == "custom" then
							line.Dash:SetText(E.db.mMT.objectivetracker.dash.customstring)
						elseif DashStyle == "icon" then
							line.Dash:SetText(DashIconString(mMT.Media.DashIcons[E.db.mMT.objectivetracker.dash.texture]))
						else
							line.Dash:Hide()
							line.Text:ClearAllPoints()
							line.Text:Point("TOPLEFT", line.Dash, "TOPLEFT", 0, 0)
						end
                    else
                        line.Dash:SetTexture(mMT.Media.MiscIcons["DONE1"])
                        line.Dash:SetVertexColor(1, 1, 1, 1)
					end
				end

				if line.Check then
					if DashStyle == "none" then
						line.Check:ClearAllPoints()
						line.Check:Point("TOPRIGHT", line.Dash, "TOPLEFT", 0, 0)
					end
					line.Check:SetTexture(mMT.Media.MiscIcons["DONE1"])
					line.Check:SetVertexColor(1, 1, 1, 1)
				end
			end
		end
	end
end

local function SetTextColors()
	local mQuestFontColor = E.db.mMT.objectivetracker.text.fontcolor
	local mQuestCompleteFontColor = E.db.mMT.objectivetracker.text.completecolor
	local mQuestFailedFontColor = E.db.mMT.objectivetracker.text.failedcolor
	local mTitelFontColor = E.db.mMT.objectivetracker.title.fontcolor

	if E.db.mMT.objectivetracker.text.fontcolorstyle == "class" then
		mQuestFontColor = { r = mMT.ClassColor.r, g = mMT.ClassColor.g, b = mMT.ClassColor.b }
	end

	if E.db.mMT.objectivetracker.title.fontcolorstyle == "class" then
		mTitelFontColor = { r = mMT.ClassColor.r, g = mMT.ClassColor.g, b = mMT.ClassColor.b }
	end

	OBJECTIVE_TRACKER_COLOR = {
		["Normal"] = { r = mQuestFontColor.r, g = mQuestFontColor.g, b = mQuestFontColor.b },
		["NormalHighlight"] = { r = mQuestFontColor.r + 0.2, g = mQuestFontColor.g + 0.2, b = mQuestFontColor.b + 0.2 },
		["Failed"] = { r = mQuestFailedFontColor.r, g = mQuestFailedFontColor.g, b = mQuestFailedFontColor.b },
		["FailedHighlight"] = {
			r = mQuestFailedFontColor.r + 0.2,
			g = mQuestFailedFontColor.g + 0.2,
			b = mQuestFailedFontColor.b + 0.2,
		},
		["Header"] = { r = mTitelFontColor.r, g = mTitelFontColor.g, b = mTitelFontColor.b },
		["HeaderHighlight"] = { r = mTitelFontColor.r + 0.2, g = mTitelFontColor.g + 0.2, b = mTitelFontColor.b + 0.2 },
		["Complete"] = { r = mQuestCompleteFontColor.r, g = mQuestCompleteFontColor.g, b = mQuestCompleteFontColor.b },
		["TimeLeft"] = { r = DIM_RED_FONT_COLOR.r, g = DIM_RED_FONT_COLOR.g, b = DIM_RED_FONT_COLOR.b },
		["TimeLeftHighlight"] = { r = RED_FONT_COLOR.r, g = RED_FONT_COLOR.g, b = RED_FONT_COLOR.b },
	}
	OBJECTIVE_TRACKER_COLOR["Normal"].reverse = OBJECTIVE_TRACKER_COLOR["NormalHighlight"]
	OBJECTIVE_TRACKER_COLOR["NormalHighlight"].reverse = OBJECTIVE_TRACKER_COLOR["Normal"]
	OBJECTIVE_TRACKER_COLOR["Failed"].reverse = OBJECTIVE_TRACKER_COLOR["FailedHighlight"]
	OBJECTIVE_TRACKER_COLOR["FailedHighlight"].reverse = OBJECTIVE_TRACKER_COLOR["Failed"]
	OBJECTIVE_TRACKER_COLOR["Header"].reverse = OBJECTIVE_TRACKER_COLOR["HeaderHighlight"]
	OBJECTIVE_TRACKER_COLOR["HeaderHighlight"].reverse = OBJECTIVE_TRACKER_COLOR["Header"]
	OBJECTIVE_TRACKER_COLOR["TimeLeft"].reverse = OBJECTIVE_TRACKER_COLOR["TimeLeftHighlight"]
	OBJECTIVE_TRACKER_COLOR["TimeLeftHighlight"].reverse = OBJECTIVE_TRACKER_COLOR["TimeLeft"]
	OBJECTIVE_TRACKER_COLOR["Complete"] = OBJECTIVE_TRACKER_COLOR["Complete"]
	OBJECTIVE_TRACKER_COLOR["CompleteHighlight"] = OBJECTIVE_TRACKER_COLOR["Complete"]
end

function module:Initialize()
	SetTextColors()

	if not module.hooked then
		hooksecurefunc("ObjectiveTracker_Expand", TrackerStateChanged)
		hooksecurefunc("ObjectiveTracker_Collapse", TrackerStateChanged)
		hooksecurefunc("ObjectiveTracker_Update", SkinHeader)

		-- hooksecurefunc(_G.BONUS_OBJECTIVE_TRACKER_MODULE, "AddObjective", HandleItemButton)
		--hooksecurefunc("BonusObjectiveTrackerProgressBar_SetValue", ColorProgressBars) --[Color]: Bonus Objective Progress Bar
		--hooksecurefunc("ObjectiveTrackerProgressBar_SetValue", ColorProgressBars) --[Color]: Quest Progress Bar
		--hooksecurefunc("ScenarioTrackerProgressBar_SetValue", ColorProgressBars) --[Color]: Scenario Progress Bar
		--hooksecurefunc("QuestObjectiveSetupBlockButton_AddRightButton", PositionFindGroupButton) --[Move]: The eye & quest item to the left of the eye
		--hooksecurefunc("ObjectiveTracker_CheckAndHideHeader", SkinOjectiveTrackerHeaders) --[Skin]: Module Headers
		--hooksecurefunc("QuestObjectiveSetupBlockButton_FindGroup", SkinFindGroupButton) --[Skin]: The eye
		hooksecurefunc(_G.BONUS_OBJECTIVE_TRACKER_MODULE, "AddProgressBar", SkinBars) --[Skin]: Bonus Objective Progress Bar
		hooksecurefunc(_G.WORLD_QUEST_TRACKER_MODULE, "AddProgressBar", SkinBars) --[Skin]: World Quest Progress Bar
		hooksecurefunc(_G.DEFAULT_OBJECTIVE_TRACKER_MODULE, "AddProgressBar", SkinBars) --[Skin]: Quest Progress Bar
		hooksecurefunc(_G.SCENARIO_TRACKER_MODULE, "AddProgressBar", SkinBars) --[Skin]: Scenario Progress Bar
		hooksecurefunc(_G.CAMPAIGN_QUEST_TRACKER_MODULE, "AddProgressBar", SkinBars) --[Skin]: Campaign Progress Bar
		hooksecurefunc(_G.QUEST_TRACKER_MODULE, "AddProgressBar", SkinBars) --[Skin]: Quest Progress Bar
		hooksecurefunc(_G.UI_WIDGET_TRACKER_MODULE, "AddProgressBar", SkinBars) --[Skin]: New DF Quest Progress Bar
		hooksecurefunc(_G.QUEST_TRACKER_MODULE, "AddTimerBar", SkinBars) --[Skin]: Quest Timer Bar
		hooksecurefunc(_G.SCENARIO_TRACKER_MODULE, "AddTimerBar", SkinBars) --[Skin]: Scenario Timer Bar
		hooksecurefunc(_G.ACHIEVEMENT_TRACKER_MODULE, "AddTimerBar", SkinBars) --[Skin]: Achievement Timer Bar
		hooksecurefunc(_G.QUEST_TRACKER_MODULE, "SetBlockHeader", SkinText)
	end

	module.hooked = true
	module.needReloadUI = true
	module.loaded = true
end
